var searchIndex = {};
searchIndex["union_find"] = {"doc":"A union-find data structure contains a partition of a contiguous bounded set of integers. It supports two operations. The union operation merges two partitions. The find operation identifies the partition containing an element by returning a \"canonical\" element of the partition as a label. Both operations are fast.","items":[[3,"UnionFind","union_find","",null,null],[11,"new","","Create a new partition table with `n` disjoint partitions numbered 0..`n`. Running time O(n).",0,{"inputs":[{"name":"usize"}],"output":{"name":"unionfind"}}],[11,"union","","Merge the partitions containing `i` and `j`.  This operation is structured such that the canonical element of the merged partition will be the canonical element of `i` in the old partition. Running time O(1).",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"find","","Return a \"canonical element\" for the partition containing `i`. Amortized worst-case running time O(alpha(n)), which is more-or-less O(1). This running time is achieved by mutating the data structure to make future `find()` operations faster.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"find_only","","Return a \"canonical element\" for the partition containing `i`. Worst-case running time O(n), found in cases involving a sequence of `union()` and `find_only()` operations with few `find()` operations. Prefer `find()` in any case where it is possible to make the table mutable.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"same","","Return `true` iff i and j are in the same partition. Time complexity is the same as `find()`.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"same_only","","Return `true` iff i and j are in the same partition. Time complexity is the same as `find_only()`. Prefer `same()` in any case where it is possible to make the table mutable.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}]],"paths":[[3,"UnionFind"]]};
initSearch(searchIndex);
